{
  "id": "src/orch/rate_limiter.py",
  "role": "infrastructure",
  "public_api": [
    "ProviderGuards.__init__(providers)",
    "ProviderGuards.get(name)",
    "Guard.acquire(estimated_prompt_tokens=0)",
    "Guard.record_usage(lease, usage_prompt_tokens, usage_completion_tokens)",
    "SlidingWindowBucket.reserve(tokens, now)",
    "SlidingWindowBucket.commit(reservation_id, tokens, now)",
    "SlidingWindowBucket.cancel(reservation_id, now)"
  ],
  "summary": "プロバイダ単位のRPM/並列/TPM制御を統合する非同期レートリミッタ群。TokenBucketとSemaphoreで分単位RPM・同時実行数を、SlidingWindowBucketでトークン毎分の滑動窓制限を担い、Guardが予約・実績トークン管理を調停する。",
  "details": {
    "ProviderGuards": "ProviderDef辞書からGuardを生成し、名前→Guardを返すアクセサを提供。サーバ初期化や設定リロード時に各プロバイダのrpm/concurrency/tpmを反映させる。",
    "Guard": "TokenBucket/SlidingWindowBucket/Semaphoreを束ねた非同期ガード。acquire/__aenter__でRPM・TPMスロットを確保し、record_usageで実績トークンをコミットして追加待機秒を返す。GuardLeaseをタスク毎に積み、未コミット予約はreleaseでキャンセルする。",
    "SlidingWindowBucket": "TPM制御用スライディングウィンドウ。reserveで推定トークンを仮押さえし、commitで実績トークンに更新、cancelで未使用予約を打ち消す。prune/time_until_reductionを通じて過去ウィンドウを落とし、必要待機時間を算出する。"
  },
  "deps_out": [
    "src/orch/router.py"
  ],
  "deps_in": [
    "src/orch/server.py"
  ],
  "tests": [
    "tests/test_rate_limiter.py"
  ]
}
