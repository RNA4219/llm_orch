{
  "id": "src/orch/rate_limiter.py",
  "role": "infrastructure",
  "public_api": [
    "Guard.acquire(estimated_prompt_tokens=0)",
    "Guard.record_usage(lease, usage_prompt_tokens, usage_completion_tokens)",
    "ProviderGuards.get(name)",
    "SlidingWindowBucket.reserve(tokens, now)"
  ],
  "summary": "RPM/TPM/並列の制限を統合し、プロバイダ呼び出しごとに待機/リース管理を行う非同期ガード群。TokenBucketで分単位RPM、SlidingWindowBucketでTPMを維持し、GuardがSemaphoreと組み合わせてAPI呼び出しの整列を担う。",
  "details": {
    "ProviderGuards": "ProviderDef群からGuardを初期化し名前→Guardの辞書を提供するファクトリ。サーバ起動時や設定リロード時に呼ばれ、プロバイダごとのrpm/concurrency/tpmをそのままGuardへ伝搬する。",
    "Guard": "TokenBucket/SlidingWindowBucket/Semaphoreを束ねた非同期コンテキスト。acquire/__aenter__でスロットを確保し、record_usageで実績トークンをコミットしてTPM待機時間を返す。リースはGuardLeaseで追跡し、未使用予約はrelease時にキャンセルする。",
    "SlidingWindowBucket": "TPM制御用のスライディングウィンドウ。reserveで推定トークンを仮押さえし、commitで実績に置換。window_seconds内のエントリをpruneしながら不足分に応じた待機秒数を計算する。"
  },
  "deps_out": [
    "src/orch/router.py"
  ],
  "deps_in": [
    "src/orch/server.py"
  ],
  "tests": [
    "tests/test_rate_limiter.py"
  ]
}
